---
title: "How to Write<br> Terrible Code"
subtitle: "A beginner guide to bad programming"
format: revealjs
css: custom_courier.css
keep-tex: true
title-slide-attributes:
  data-background-image: Figures/ONDA_logo_v12a.png
  data-background-size: 300px
  data-background-position: center 85%
---

## Introduction (1/2)


This guide, written by the Coding Group of the ONDA Lab, is **a humorous collection of bad programming habits**.
While many guides explain how to write good code, we realized that another way to learn is by looking at what not to do. 


## Introduction (1/2)
After all, most of us (certainly we, at least) are naturally prone to becoming bad programmers.
So instead of only focusing on the ‚Äúright‚Äù way, this guide highlights the habits you really shouldn‚Äôt have (but probably already do).

<br>

**Enjoy!**

<br>

_P.S. If you think we‚Äôre writing this because we‚Äôre excellent programmers, you couldn‚Äôt be more wrong. But we‚Äôre trying to unlearn these bad habits!_

<br>
<div class="download-button">
<em> P.P.S. Click here to </em> <a href="?print-pdf" target="_blank"> download the PDF version üìÑ</a>
</div>

## 1. Write your code as a single long script

<br>

_The truth: unless you have a very short task, a very long script is often difficult to work on, to reuse, to mantain, and to share._

<br>

__When you write long script you tend to think in a less modular way and you don't break down you problem.__

## 2.Create numerous versions of your code using v1, v2, v3, etc.

## 3. Don‚Äôt think before coding‚Äîjust jump in and write lines of code based on instinct.

## 4. Spend days and days in designing how you would code, before actually coding.

## 5. If you need to reuse code throughout your analysis, copy and paste as much as possible.

## 6. Do not waste time on writing comments in your code.

## 7. Use the shortest possible names for your objects and functions.

## 8. Always write functions that are absolutely generalizable.

## 9. When using comments, comment in detail every single step.




